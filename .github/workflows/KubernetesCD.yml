name: CD - Continuous Deployment on Kubernetes

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - prod
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}


      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

      - name: Deploy client nginx ConfigMap
        run: |
          kubectl apply -f k8s/client-nginx-config.yaml

      - name: Delete existing MySQL
        run: |
          helm uninstall mysql --namespace team-git-happens || true

      - name: Create database secret
        run: |
          kubectl create secret generic mysql --namespace team-git-happens \
            --from-literal=mysql-root-password="${{ secrets.DB_PASSWORD }}" \
            --from-literal=mysql-password="${{ secrets.DB_PASSWORD }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy MySQL (Bitnami Chart)
        run: |
          helm upgrade --install mysql oci://registry-1.docker.io/bitnamicharts/mysql \
            --namespace team-git-happens \
            --create-namespace \
            -f ./helm-charts/mysql/mysql-values.yaml

      - name: Deploy client-app
        run: |
          helm upgrade --install client-app ./helm-charts/client-app \
            --namespace team-git-happens \
            --create-namespace \
            --set image.tag=k8s-latest \
            --set ingress.enabled=false

      - name: Deploy authentication-service
        run: |
          helm upgrade --install authentication-service ./helm-charts/authentication-service \
            --namespace team-git-happens \
            --set image.tag=latest

      - name: Deploy course-service
        run: |
          helm upgrade --install course-service ./helm-charts/course-service \
            --namespace team-git-happens \
            --set image.tag=latest

      - name: Deploy review-service
        run: |
          helm upgrade --install review-service ./helm-charts/review-service \
            --namespace team-git-happens \
            --set image.tag=latest || echo "Review service deployment failed, continuing..."

      - name: Deploy recommendation-gateway
        run: |
          helm upgrade --install recommendation-gateway ./helm-charts/recommendation-gateway \
            --namespace team-git-happens \
            --set image.tag=latest

      - name: Create GenAI secret
        run: |
          kubectl create secret generic genai-secret --namespace team-git-happens \
            --from-literal=API_URL="${{ secrets.API_URL }}" \
            --from-literal=API_KEY="${{ secrets.API_KEY }}" \
            --from-literal=MODEL="${{ secrets.MODEL }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy genai-service
        run: |
          helm upgrade --install genai-service ./helm-charts/genai-service \
            --namespace team-git-happens \
            --set image.tag=latest
      
      - name: Setup Monitoring - Verify metrics endpoints
        run: |
          echo "=== APPLICATION METRICS VERIFICATION ==="
          echo "Waiting for services to be ready..."
          kubectl wait --for=condition=ready pod -l app=authentication-service --namespace team-git-happens --timeout=120s || echo "Authentication service not ready"
          kubectl wait --for=condition=ready pod -l app=course-service --namespace team-git-happens --timeout=120s || echo "Course service not ready"
          kubectl wait --for=condition=ready pod -l app=recommendation-gateway --namespace team-git-happens --timeout=120s || echo "Recommendation gateway not ready"
          kubectl wait --for=condition=ready pod -l app=review-service --namespace team-git-happens --timeout=120s || echo "Review service not ready"
          kubectl wait --for=condition=ready pod -l app=genai-service --namespace team-git-happens --timeout=120s || echo "GenAI service not ready"
          
          echo ""
          echo "✅ Application metrics endpoints are available at:"
          echo "   📊 Authentication Service: https://k83-client-app.student.k8s.aet.tum.de/auth/actuator/prometheus"
          echo "   📊 Course Service: https://k83-client-app.student.k8s.aet.tum.de/courses/actuator/prometheus"
          echo "   📊 Review Service: https://k83-client-app.student.k8s.aet.tum.de/review/actuator/prometheus"
          echo "   📊 Recommendation Gateway: https://k83-client-app.student.k8s.aet.tum.de/recommendation/actuator/prometheus"
          echo ""
          echo "❤️  Health check endpoints:"
          echo "   ❤️  Authentication Service: https://k83-client-app.student.k8s.aet.tum.de/auth/actuator/health"
          echo "   ❤️  Course Service: https://k83-client-app.student.k8s.aet.tum.de/courses/actuator/health"
          echo "   ❤️  Review Service: https://k83-client-app.student.k8s.aet.tum.de/review/actuator/health"
          echo "   ❤️  Recommendation Gateway: https://k83-client-app.student.k8s.aet.tum.de/recommendation/actuator/health"
          echo "   ❤️  GenAI Service: https://k83-client-app.student.k8s.aet.tum.de/genai/health (FastAPI service)"
          echo ""
          echo "📝 Services with monitoring labels:"
          kubectl get services -n team-git-happens -l monitoring=true --no-headers | awk '{print "   - " $1 ":8080/actuator/prometheus"}' || true
          echo ""
          echo "✅ Monitoring verification complete!"
      
      - name: Deploy Unified Ingress
        run: |
          kubectl apply -f k8s/unified-ingress.yaml
          
      - name: Deploy Monitoring Stack
        run: |
          echo "🚀 Deploying Prometheus and Grafana monitoring stack..."
          
          echo "📊 Deploying Prometheus and Alert Rules..."
          # Deploy Prometheus alert rules first
          kubectl apply -f k8s/prometheus-alert-rules.yaml -n team-git-happens
          
          # Deploy Prometheus
          kubectl apply -f k8s/prometheus.yaml -n team-git-happens
          
          echo "🚨 Deploying Alertmanager..."
          # Deploy Alertmanager
          kubectl apply -f k8s/alertmanager.yaml -n team-git-happens
          
          echo "📈 Deploying Grafana..."
          # Update Grafana dashboard configmap with all dashboard files
          echo "🔧 Updating Grafana dashboards configmap..."
          
          # Create configmap with all dashboard files
          kubectl create configmap grafana-dashboards \
            --from-file=monitoring/grafana-dashboards/ \
            --dry-run=client -o yaml | \
            kubectl apply -f - -n team-git-happens
          
          # Apply Grafana datasources and dashboard provider configmaps
          kubectl apply -f k8s/grafana/ -n team-git-happens
          
          echo "🔄 Updating NGINX configuration..."
          # Update NGINX configuration for monitoring endpoints
          kubectl apply -f k8s/client-nginx-config.yaml
          
          echo "⏳ Waiting for deployments to be ready..."
          # Wait for deployments to be ready
          kubectl rollout status deployment/prometheus -n team-git-happens --timeout=300s
          kubectl rollout status deployment/alertmanager -n team-git-happens --timeout=300s
          kubectl rollout status deployment/grafana -n team-git-happens --timeout=300s
          
          echo "✅ Monitoring stack deployment complete!"
          echo ""
          echo "🔗 Access URLs:"
          echo "   • Grafana: https://compass-app.tum.de/grafana/"
          echo "   • Prometheus: https://compass-app.tum.de/prometheus/"
          echo "   • Alertmanager: https://compass-app.tum.de/alertmanager/"
          
      - name: Verify deployment
        run: |
          kubectl get ingress -n team-git-happens
          kubectl describe ingress unified-app-ingress -n team-git-happens
      
      - name: Final deployment summary
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          echo "✅ All services deployed successfully!"
          echo ""
          echo "🌐 Application Access:"
          echo "   🌍 Web Application: https://k83-client-app.student.k8s.aet.tum.de/"
          echo ""
          echo "📊 Monitoring & Observability:"
          echo "   📈 Grafana Dashboards: https://k83-client-app.student.k8s.aet.tum.de/grafana/"
          echo "   🔍 Prometheus Metrics: https://k83-client-app.student.k8s.aet.tum.de/prometheus/"
          echo "   🚨 Alertmanager: https://k83-client-app.student.k8s.aet.tum.de/alertmanager/"
          echo "   🔐 Grafana Login: admin / admin123"
          echo ""
          echo "📊 Service Metrics URLs:"
          echo "   📊 Authentication Service: https://k83-client-app.student.k8s.aet.tum.de/auth/actuator/prometheus"
          echo "   📊 Course Service: https://k83-client-app.student.k8s.aet.tum.de/courses/actuator/prometheus"
          echo "   📊 Review Service: https://k83-client-app.student.k8s.aet.tum.de/review/actuator/prometheus"
          echo "   📊 Recommendation Gateway: https://k83-client-app.student.k8s.aet.tum.de/recommendation/actuator/prometheus"
          echo ""
          echo "❤️  Health Check URLs:"
          echo "   ❤️  Authentication Service: https://k83-client-app.student.k8s.aet.tum.de/auth/actuator/health"
          echo "   ❤️  Course Service: https://k83-client-app.student.k8s.aet.tum.de/courses/actuator/health"
          echo "   ❤️  Review Service: https://k83-client-app.student.k8s.aet.tum.de/review/actuator/health"
          echo "   ❤️  Recommendation Gateway: https://k83-client-app.student.k8s.aet.tum.de/recommendation/actuator/health"
          echo "   ❤️  GenAI Service: https://k83-client-app.student.k8s.aet.tum.de/genai/health (FastAPI service)"
          echo ""
          echo "🎯 Dashboard Features:"
          echo "   • 9 comprehensive Grafana dashboards with enhanced metrics"
          echo "   • Real-time monitoring of all microservices"
          echo "   • Email alerts configured for critical issues"
          echo "   • Performance metrics, JVM monitoring, and service health"
          echo ""
          echo "🚀 Full monitoring stack deployed successfully!"      

      