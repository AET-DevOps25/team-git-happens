name: CD - Continuous Deployment on Kubernetes

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - prod
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}


      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

      - name: Deploy client nginx ConfigMap
        run: |
          kubectl apply -f k8s/client-nginx-config.yaml

      - name: Delete existing MySQL
        run: |
          helm uninstall mysql --namespace team-git-happens || true

      - name: Create database secret
        run: |
          kubectl create secret generic mysql --namespace team-git-happens \
            --from-literal=mysql-root-password="${{ secrets.DB_PASSWORD }}" \
            --from-literal=mysql-password="${{ secrets.DB_PASSWORD }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy MySQL (Bitnami Chart)
        run: |
          helm upgrade --install mysql oci://registry-1.docker.io/bitnamicharts/mysql \
            --namespace team-git-happens \
            --create-namespace \
            -f ./helm-charts/mysql/mysql-values.yaml

      - name: Deploy client-app
        run: |
          helm upgrade --install client-app ./helm-charts/client-app \
            --namespace team-git-happens \
            --create-namespace \
            --set image.tag=k8s-latest \
            --set ingress.enabled=false

      - name: Deploy authentication-service
        run: |
          helm upgrade --install authentication-service ./helm-charts/authentication-service \
            --namespace team-git-happens \
            --set image.tag=latest

      - name: Deploy course-service
        run: |
          helm upgrade --install course-service ./helm-charts/course-service \
            --namespace team-git-happens \
            --set image.tag=latest

      - name: Deploy review-service
        run: |
          helm upgrade --install review-service ./helm-charts/review-service \
            --namespace team-git-happens \
            --set image.tag=latest || echo "Review service deployment failed, continuing..."

      - name: Deploy recommendation-gateway
        run: |
          helm upgrade --install recommendation-gateway ./helm-charts/recommendation-gateway \
            --namespace team-git-happens \
            --set image.tag=latest

      - name: Create GenAI secret
        run: |
          kubectl create secret generic genai-secret --namespace team-git-happens \
            --from-literal=API_URL="${{ secrets.API_URL }}" \
            --from-literal=API_KEY="${{ secrets.API_KEY }}" \
            --from-literal=MODEL="${{ secrets.MODEL }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy genai-service
        run: |
          helm upgrade --install genai-service ./helm-charts/genai-service \
            --namespace team-git-happens \
            --set image.tag=latest
      
      - name: Setup Monitoring - Verify metrics endpoints
        run: |
          echo "=== APPLICATION METRICS VERIFICATION ==="
          echo "Waiting for services to be ready..."
          kubectl wait --for=condition=ready pod -l app=authentication-service --namespace team-git-happens --timeout=120s || echo "Authentication service not ready"
          kubectl wait --for=condition=ready pod -l app=course-service --namespace team-git-happens --timeout=120s || echo "Course service not ready"
          kubectl wait --for=condition=ready pod -l app=recommendation-gateway --namespace team-git-happens --timeout=120s || echo "Recommendation gateway not ready"
          kubectl wait --for=condition=ready pod -l app=review-service --namespace team-git-happens --timeout=120s || echo "Review service not ready"
          kubectl wait --for=condition=ready pod -l app=genai-service --namespace team-git-happens --timeout=120s || echo "GenAI service not ready"
          
          echo ""
          echo "‚úÖ Application metrics endpoints are available at:"
          echo "   üìä Authentication Service: https://k83-client-app.student.k8s.aet.tum.de/auth/actuator/prometheus"
          echo "   üìä Course Service: https://k83-client-app.student.k8s.aet.tum.de/course/actuator/prometheus"
          echo "   üìä Review Service: https://k83-client-app.student.k8s.aet.tum.de/review/actuator/prometheus"
          echo "   üìä Recommendation Gateway: https://k83-client-app.student.k8s.aet.tum.de/recommendation/actuator/prometheus"
          echo "   üìä GenAI Service: https://k83-client-app.student.k8s.aet.tum.de/genai/actuator/prometheus"
          echo ""
          echo "‚ù§Ô∏è  Health check endpoints:"
          echo "   ‚ù§Ô∏è  Authentication Service: https://k83-client-app.student.k8s.aet.tum.de/auth/actuator/health"
          echo "   ‚ù§Ô∏è  Course Service: https://k83-client-app.student.k8s.aet.tum.de/course/actuator/health"
          echo "   ‚ù§Ô∏è  Review Service: https://k83-client-app.student.k8s.aet.tum.de/review/actuator/health"
          echo "   ‚ù§Ô∏è  Recommendation Gateway: https://k83-client-app.student.k8s.aet.tum.de/recommendation/actuator/health"
          echo "   ‚ù§Ô∏è  GenAI Service: https://k83-client-app.student.k8s.aet.tum.de/genai/actuator/health"
          echo ""
          echo "üìù Services with monitoring labels:"
          kubectl get services -n team-git-happens -l monitoring=true --no-headers | awk '{print "   - " $1 ":8080/actuator/prometheus"}' || true
          echo ""
          echo "‚úÖ Monitoring verification complete!"
      
      - name: Deploy Unified Ingress
        run: |
          kubectl apply -f k8s/unified-ingress.yaml
          
      - name: Verify deployment
        run: |
          kubectl get ingress -n team-git-happens
          kubectl describe ingress unified-app-ingress -n team-git-happens
      
      - name: Final deployment summary
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          echo "‚úÖ All services deployed successfully!"
          echo ""
          echo "üåê Application Access:"
          echo "   üåç Web Application: https://k83-client-app.student.k8s.aet.tum.de/"
          echo ""
          echo "üìä Monitoring & Metrics URLs:"
          echo "   ÔøΩ Authentication Service: https://k83-client-app.student.k8s.aet.tum.de/auth/actuator/prometheus"
          echo "   üìä Course Service: https://k83-client-app.student.k8s.aet.tum.de/course/actuator/prometheus"
          echo "   üìä Review Service: https://k83-client-app.student.k8s.aet.tum.de/review/actuator/prometheus"
          echo "   üìä Recommendation Gateway: https://k83-client-app.student.k8s.aet.tum.de/recommendation/actuator/prometheus"
          echo "   üìä GenAI Service: https://k83-client-app.student.k8s.aet.tum.de/genai/actuator/prometheus"
          echo ""
          echo "‚ù§Ô∏è  Health Check URLs:"
          echo "   ‚ù§Ô∏è  Authentication Service: https://k83-client-app.student.k8s.aet.tum.de/auth/actuator/health"
          echo "   ‚ù§Ô∏è  Course Service: https://k83-client-app.student.k8s.aet.tum.de/course/actuator/health"
          echo "   ‚ù§Ô∏è  Review Service: https://k83-client-app.student.k8s.aet.tum.de/review/actuator/health"
          echo "   ‚ù§Ô∏è  Recommendation Gateway: https://k83-client-app.student.k8s.aet.tum.de/recommendation/actuator/health"
          echo "   ‚ù§Ô∏è  GenAI Service: https://k83-client-app.student.k8s.aet.tum.de/genai/actuator/health"
          echo ""
          echo "üîß All metrics are accessible via web URLs listed above."
          echo ""
          echo "ÔøΩ Note: Due to cluster permissions, full Prometheus/Grafana stack is not deployed."
          echo "    Metrics are available at application level for external monitoring tools."
          echo ""
          echo "üöÄ Deployment completed successfully!"      

      