name: CD - Continuous Deployment on Kubernetes

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - prod
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}


      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

      - name: Deploy client nginx ConfigMap
        run: |
          kubectl apply -f k8s/client-nginx-config.yaml

      - name: Delete existing MySQL
        run: |
          helm uninstall mysql --namespace team-git-happens || true

      - name: Create database secret
        run: |
          kubectl create secret generic mysql --namespace team-git-happens \
            --from-literal=mysql-root-password="${{ secrets.DB_PASSWORD }}" \
            --from-literal=mysql-password="${{ secrets.DB_PASSWORD }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy MySQL (Bitnami Chart)
        run: |
          helm upgrade --install mysql oci://registry-1.docker.io/bitnamicharts/mysql \
            --namespace team-git-happens \
            --create-namespace \
            -f ./helm-charts/mysql/mysql-values.yaml

      - name: Deploy client-app
        run: |
          helm upgrade --install client-app ./helm-charts/client-app \
            --namespace team-git-happens \
            --create-namespace \
            --set image.tag=k8s-latest \
            --set ingress.enabled=false

      - name: Deploy authentication-service
        run: |
          helm upgrade --install authentication-service ./helm-charts/authentication-service \
            --namespace team-git-happens \
            --set image.tag=latest

      - name: Deploy course-service
        run: |
          helm upgrade --install course-service ./helm-charts/course-service \
            --namespace team-git-happens \
            --set image.tag=latest

      - name: Deploy review-service
        run: |
          helm upgrade --install review-service ./helm-charts/review-service \
            --namespace team-git-happens \
            --set image.tag=latest || echo "Review service deployment failed, continuing..."

      - name: Deploy recommendation-gateway
        run: |
          helm upgrade --install recommendation-gateway ./helm-charts/recommendation-gateway \
            --namespace team-git-happens \
            --set image.tag=latest

      - name: Create GenAI secret
        run: |
          kubectl create secret generic genai-secret --namespace team-git-happens \
            --from-literal=API_URL="${{ secrets.API_URL }}" \
            --from-literal=API_KEY="${{ secrets.API_KEY }}" \
            --from-literal=MODEL="${{ secrets.MODEL }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy genai-service
        run: |
          helm upgrade --install genai-service ./helm-charts/genai-service \
            --namespace team-git-happens \
            --set image.tag=latest
      
      - name: Setup Monitoring - Create monitoring namespace
        run: |
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Setup Monitoring - Add Prometheus Helm repository
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
      
      - name: Setup Monitoring - Deploy Prometheus stack
        run: |
          helm upgrade --install prometheus \
            prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            -f ./monitoring/monitoring-values.yaml \
            --timeout 10m
      
      - name: Setup Monitoring - Wait for Prometheus to be ready
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus --namespace monitoring --timeout=300s || true
      
      - name: Setup Monitoring - Apply ServiceMonitors
        run: |
          kubectl apply -f ./monitoring/authentication-service-monitor.yaml
          kubectl apply -f ./monitoring/course-service-monitor.yaml
          kubectl apply -f ./monitoring/review-service-monitor.yaml
          kubectl apply -f ./monitoring/recommendation-gateway-monitor.yaml
          kubectl apply -f ./monitoring/genai-service-monitor.yaml
      
      - name: Setup Monitoring - Deploy monitoring ingress
        run: |
          kubectl apply -f k8s/monitoring-ingress.yaml
      
      - name: Deploy Unified Ingress
        run: |
          kubectl apply -f k8s/unified-ingress.yaml
          
      - name: Verify deployment
        run: |
          kubectl get ingress -n team-git-happens
          kubectl describe ingress unified-app-ingress -n team-git-happens
      
      - name: Verify monitoring setup
        run: |
          echo "=== MONITORING SETUP VERIFICATION ==="
          echo "Checking monitoring namespace..."
          kubectl get pods -n monitoring
          echo ""
          echo "Checking ServiceMonitors..."
          kubectl get servicemonitors -n monitoring
          echo ""
          echo "Checking if services have monitoring labels..."
          kubectl get services -n team-git-happens -l monitoring=true
          echo ""
          echo "=== ACCESS INSTRUCTIONS ==="
          echo "‚úÖ Monitoring setup complete!"
          echo ""
          echo "üåê Web Access (via Ingress):"
          echo "   üìä Grafana: https://k83-client-app.student.k8s.aet.cit.tum.de/grafana/"
          echo "   üîç Prometheus: https://k83-client-app.student.k8s.aet.cit.tum.de/prometheus/"
          echo ""
          echo "üîß Local Access (via port-forward - for troubleshooting only):"
          echo "   üîç Prometheus: kubectl port-forward svc/prometheus-kube-prometheus-prometheus 9090:9090 -n monitoring"
          echo "      Then visit: http://localhost:9090"
          echo "   üìä Grafana: kubectl port-forward svc/prometheus-grafana 3000:80 -n monitoring"
          echo "      Then visit: http://localhost:3000"
          echo ""
          echo "üîë To get Grafana admin password:"
          echo "   kubectl get secret prometheus-grafana -n monitoring -o jsonpath='{.data.admin-password}' | base64 --decode"
          echo ""
          echo "üìà Expected metrics endpoints:"
          echo "   - http://authentication-service:8080/actuator/prometheus"
          echo "   - http://course-service:8080/actuator/prometheus"
          echo "   - http://recommendation-gateway:8080/actuator/prometheus"      

      