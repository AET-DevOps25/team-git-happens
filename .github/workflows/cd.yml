name: CD - Continuous Deployment on Cloud

on:
  # Trigger on push to specific branches (more reliable than workflow_run)
  #push:
  #  branches: [ main, develop, deployment-ec2 ]
    # paths-ignore:
    #   - 'README.md'
    #   - 'docs/**'
    #   - '*.md'
  workflow_run:
    workflows: ["CI - Continuous Integration"]
    types:
      - completed
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - prod
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'
        type: string
      destroy:
        description: 'Destroy infrastructure'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.0
  ANSIBLE_VERSION: 8.0.0

jobs:
  # Infrastructure Deployment
  terraform:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'workflow_run'
    
    outputs:
      ec2-ip: ${{ steps.output.outputs.ec2_public_ip }}
      app-url: ${{ steps.output.outputs.application_url }}
      environment: ${{ steps.env.outputs.environment }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Determine environment and image tag
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_name }}" == "main" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
          echo "image_tag=latest" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "image_tag=staging" >> $GITHUB_OUTPUT
        fi

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Plan
      working-directory: ./terraform
      if: github.event.inputs.destroy != 'true'
      run: |
        terraform plan \
          -var-file="${{ steps.env.outputs.environment }}.tfvars" \
          -var="db_username=${{ secrets.USERNAME }}" \
          -var="db_password=${{ secrets.PASSWORD }}" \
          -var="image_tag=${{ steps.env.outputs.image_tag }}" \
          -out=tfplan

    - name: Terraform Apply
      working-directory: ./terraform
      if: github.event.inputs.destroy != 'true'
      run: terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      working-directory: ./terraform
      if: github.event.inputs.destroy == 'true'
      run: |
        terraform destroy -auto-approve \
          -var-file="${{ steps.env.outputs.environment }}.tfvars" \
          -var="db_username=${{ secrets.USERNAME }}" \
          -var="db_password=${{ secrets.PASSWORD }}" \
          -var="image_tag=${{ steps.env.outputs.image_tag }}"

    - name: Get Terraform outputs
      id: output
      working-directory: ./terraform
      if: github.event.inputs.destroy != 'true'
      run: |
        echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT
        echo "application_url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT

  # Application Configuration with Ansible
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [terraform]
    if: needs.terraform.result == 'success' && github.event.inputs.destroy != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible==${{ env.ANSIBLE_VERSION }}
        pip install boto3 botocore

    - name: Configure SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ needs.terraform.outputs.ec2-ip }} >> ~/.ssh/known_hosts

    - name: Create Ansible inventory
      run: |
        mkdir -p ansible/inventory
        cat > ansible/inventory/hosts << EOF
        [ec2_instances]
        ${{ needs.terraform.outputs.ec2-ip }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa
        
        [ec2_instances:vars]
        ansible_ssh_common_args='-o StrictHostKeyChecking=no'
        EOF

    - name: Wait for EC2 instances to be ready
      run: |
        echo "Waiting for ${{ needs.terraform.outputs.ec2-ip }} to be ready..."
        while ! nc -z ${{ needs.terraform.outputs.ec2-ip }} 22; do
          sleep 10
        done
        echo "${{ needs.terraform.outputs.ec2-ip }} is ready"

    - name: Determine image tag for deployment
      id: deploy-tag
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" == "deployment-ec2"]]; then 
          echo "image_tag=latest" >> $GITHUB_OUTPUT
        else
          echo "image_tag=staging" >> $GITHUB_OUTPUT
        fi

    - name: Deploy application with Ansible
      working-directory: ./ansible
      run: |
        ansible-playbook -i inventory/hosts playbook.yml \
          -e "image_tag=${{ steps.deploy-tag.outputs.image_tag }}" \
          -e "db_username=${{ secrets.USERNAME }}" \
          -e "db_password=${{ secrets.PASSWORD }}" \
          -e "mysql_root_password=${{ secrets.PASSWORD }}" \
          -e "github_username=${{ github.actor }}" \
          -e "github_token=${{ secrets.GITHUB_TOKEN }}" \
          -e "api_url=${{ secrets.API_URL }}" \
          -e "api_key=${{ secrets.API_KEY }}" \
          -e "model=${{ secrets.MODEL }}" \
          -v

    - name: Health check
      run: |
        echo "Waiting for application to be ready..."
        sleep 60
        
        echo "Checking health of ${{ needs.terraform.outputs.ec2-ip }}..."
        curl -f http://${{ needs.terraform.outputs.ec2-ip }}/ || echo "Health check failed"

    - name: Deploy summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.terraform.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag**: ${{ steps.deploy-tag.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Application URL**: ${{ needs.terraform.outputs.app-url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **EC2 Instance**: ${{ needs.terraform.outputs.ec2-ip }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Database**: Containerized MySQL" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
