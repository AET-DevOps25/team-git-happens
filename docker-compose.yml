services:
  db:
    image: mysql:8.0
    container_name: mysql_server
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}' # Use env var or default
      MYSQL_ADMIN_PASSWORD: '${DB_PASSWORD}' # Use same password for admin user
      # MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD are removed here
      # as we'll use init scripts for more granular control.
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      # Mount a directory for SQL initialization scripts
      - ./server/mysql-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-proot", "-p$${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  client-app:
    image: ghcr.io/aet-devops25/team-git-happens/client:latest
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client_app
    ports:
      - "3000:80" 
    restart: unless-stopped
    depends_on:
      - course-service 

  course-service:
    image: ghcr.io/aet-devops25/team-git-happens/course:latest
    build:
      context: ./server/course-service
      dockerfile: Dockerfile
    container_name: course_service_app
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8085:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql_server:3306/course_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: '${USERNAME}'
      SPRING_DATASOURCE_PASSWORD: '${PASSWORD}' 
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_FLYWAY_ENABLED: "true"
      # SPRING_FLYWAY_USER: ${SPRING_DATASOURCE_USERNAME} # Flyway will use datasource user/pass
      # SPRING_FLYWAY_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      # SPRING_FLYWAY_URL: ${SPRING_DATASOURCE_URL}

  authentication-service: 
    image: ghcr.io/aet-devops25/team-git-happens/authentication:latest
    build:
      context: ./server/authentication-service 
      dockerfile: Dockerfile
    container_name: authentication_service_app
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8086:8080" 
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql_server:3306/auth_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true 
      SPRING_DATASOURCE_USERNAME: '${DB_USERNAME}'
      SPRING_DATASOURCE_PASSWORD: '${DB_PASSWORD}'
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate 
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: "true"
      LOGGING_LEVEL_ORG_FLYWAYDB: DEBUG 

  review-service:
    image: ghcr.io/aet-devops25/team-git-happens/review:latest
    build:
      context: ./server/review-service
      dockerfile: Dockerfile
    container_name: review_service_app
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8087:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql_server:3306/review_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true 
      SPRING_DATASOURCE_USERNAME: '${DB_USERNAME}'
      SPRING_DATASOURCE_PASSWORD: '${DB_PASSWORD}'
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate 
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: "true"
      LOGGING_LEVEL_ORG_FLYWAYDB: DEBUG

  genai-service:
    image: ghcr.io/aet-devops25/team-git-happens/genai-service:latest
    build:
      context: ./genai-service
      dockerfile: Dockerfile
    env_file:
      - .env
    container_name: genai_app
    ports:
      - "8000:8000"
    restart: unless-stopped
    depends_on:
      - db
      - course-service
      - review-service
 
  recommendation-gateway:
    image: ghcr.io/aet-devops25/team-git-happens/recommendation-gateway:latest
    build:
      context: ./server/recommendation-gateway     
      dockerfile: Dockerfile
    container_name: recommendation_gateway_app
    ports:
      - "8090:8080"                
    depends_on:
      - genai-service
      - course-service
      - review-service

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - course-service
      - review-service
      - authentication-service
      - recommendation-gateway
      - genai-service

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana_dev
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: '${GRAFANA_ADMIN_PASSWORD:-admin123}'
      GF_SERVER_ROOT_URL: 'http://localhost:3001/'
      GF_SECURITY_ALLOW_EMBEDDING: 'true'
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

volumes:
  mysql_data:
  grafana_dev_data:
  prometheus_data: