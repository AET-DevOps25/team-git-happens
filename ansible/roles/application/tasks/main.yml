---
# Application role tasks
- name: Create application directory
  file:
    path: "{{ app_dir }}"
    state: directory
    owner: ec2-user
    group: ec2-user
    mode: '0755'

- name: Copy docker-compose.prod.yml to server
  copy:
    src: ../../../docker-compose.prod.yml
    dest: "{{ app_dir }}/docker-compose.yml"
    owner: ec2-user
    group: ec2-user
    mode: '0644'

- name: Copy MySQL initialization scripts
  copy:
    src: ../../../server/mysql-init/
    dest: "{{ app_dir }}/mysql-init/"
    owner: ec2-user
    group: ec2-user
    mode: '0644'

- name: Create environment file
  template:
    src: env.j2
    dest: "{{ app_dir }}/.env"
    owner: ec2-user
    group: ec2-user
    mode: '0600'

- name: Install required python libraries
  pip:
    name:
      - requests
      - docker
      - urllib3<2.0
      - docker-compose
    executable: pip3
  become: yes

- name: Ensure ec2-user is in docker group and setup Docker
  block:
    - name: Add ec2-user to docker group (ensure it's applied)
      user:
        name: ec2-user
        groups: docker
        append: yes
      become: yes
    
    - name: Restart Docker service
      systemd:
        name: docker
        state: restarted
      become: yes
      
    - name: Wait for Docker socket to be ready
      wait_for:
        path: /var/run/docker.sock
        timeout: 30
      become: yes
      
    - name: Set Docker socket permissions
      file:
        path: /var/run/docker.sock
        owner: root
        group: docker
        mode: '0664'
      become: yes

- name: Test Docker access
  shell: docker version
  become: yes
  register: docker_test

- name: Debug Docker test result
  debug:
    var: docker_test

- name: Login to GitHub Container Registry using shell command
  shell: |
    echo "{{ github_token }}" | docker login ghcr.io -u "{{ github_username }}" --password-stdin
  become: yes
  no_log: true
  register: docker_login_result

- name: Debug login result
  debug:
    var: docker_login_result
  when: docker_login_result.rc != 0

- name: Pull latest Docker images
  shell: |
    docker pull "{{ item }}"
  loop:
    - "ghcr.io/aet-devops25/team-git-happens/client:{{ image_tag }}"
    - "ghcr.io/aet-devops25/team-git-happens/course:{{ image_tag }}"
    - "ghcr.io/aet-devops25/team-git-happens/authentication:{{ image_tag }}"
    - "ghcr.io/aet-devops25/team-git-happens/review:{{ image_tag }}"
    - "ghcr.io/aet-devops25/team-git-happens/recommendation-gateway:{{ image_tag }}"
    - "ghcr.io/aet-devops25/team-git-happens/genai-service:{{ image_tag }}"
  become: yes

- name: Stop existing application (if any)
  shell: |
    cd "{{ app_dir }}"
    /usr/local/bin/docker-compose down || docker-compose down || true
  become: yes
  ignore_errors: yes

- name: Start application with docker-compose
  shell: |
    cd "{{ app_dir }}"
    /usr/local/bin/docker-compose up -d --remove-orphans || docker-compose up -d --remove-orphans
  become: yes
  register: docker_compose_result

- name: Show docker-compose output
  debug:
    var: docker_compose_result

- name: Check running containers
  shell: docker ps
  become: yes
  register: docker_ps_result

- name: Show running containers
  debug:
    var: docker_ps_result.stdout_lines

- name: Wait for application to be ready
  uri:
    url: "http://localhost"
    method: GET
    status_code: 200
  retries: 30
  delay: 10
  ignore_errors: yes

- name: Create systemd service for application
  template:
    src: course-compass.service.j2
    dest: /etc/systemd/system/course-compass.service
    mode: '0644'
  notify:
    - reload systemd
    - enable course-compass service

- name: Display application status
  debug:
    msg: "Application deployment completed. Docker-compose output: {{ docker_compose_result.stdout if docker_compose_result.stdout is defined else 'No output' }}"
